package com.pctc.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;


import javax.servlet.http.HttpServletRequest;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;

import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.pctc.model.QuestionBnak;
import com.pctc.model.QuestionBnakExample;

import com.pctc.model.QuestionDaily;
import com.pctc.model.QuestionDailyExample;
import com.pctc.model.QuestionPaper;
import com.pctc.model.QuestionBnakExample.Criteria;

import com.pctc.model.QuestionType;
import com.pctc.model.QuestionTypeExample;
import com.pctc.service.QuestionBankService;
import com.pctc.service.QuestionDailyService;
import com.pctc.service.QuestionPaperService;
import com.pctc.service.QuestionTypeService;

@Controller
@RequestMapping("question")
public class QuestionManager {
	


	
	//注入题库service
	@Autowired
	private QuestionBankService questionBankService;
	
	//注入题型service
	@Autowired
	private QuestionTypeService questionTypeService;
	
	
	@Autowired
	private QuestionDailyService questionDailyService;
	
	

	
	

	// 接受页面的qdaily对象，添加入库
	@RequestMapping("insertQuestion")
	public String addQiestion(QuestionBnak qBnak, Map<String, Object> map, @RequestParam("file") MultipartFile file,
			HttpServletRequest request,QuestionType qType) {
		if (qBnak != null&&qType!=null) {
			String path = request.getSession().getServletContext().getRealPath("upload");
			String fileName = file.getOriginalFilename();
			qBnak.setQbImageUrl(path);
			qBnak.setQbCreateTime(new Date());
			qBnak.setQbDelete(false);
			qType=questionTypeService.getQuestionTypeName(qType.getQtName());
			qBnak.setQbQtid(qType.getQtId());
			questionBankService.insertQuestion(qBnak);			
		}
		String ss = "添加成功";
		map.put("info", ss);
		return "forward:../question/selectAllQuestion";// 转发给查询action
	}

	// 查询所有的题库题目，分页显示
	@RequestMapping("selectAllQuestion")
	public String selectAllQuestion(Map<String , Object> map, @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum) {
		Page<QuestionBnak> page = PageHelper.startPage(pageNum, 3);// 一定要在分页查询之前
		QuestionBnakExample qBnakExample = new QuestionBnakExample();
		Criteria criteria = qBnakExample.createCriteria();
		criteria.andQbDeleteEqualTo(false);
		List<QuestionBnak> questionBnaks = questionBankService.selectAllQuestion(qBnakExample);
		PageInfo<QuestionBnak> pageInfo = new PageInfo<QuestionBnak>(questionBnaks, 5);
		map.put("questionBnaks", questionBnaks);
		map.put("pageInfo", pageInfo);
		return "questionList";
	}



	// 对题目进行修改 入库并并返回查询页面
	@RequestMapping("updateQuestionBnak")
	public String updateQuestionBank(QuestionBnak qBnak, @RequestParam("file") MultipartFile file,
			HttpServletRequest request,QuestionType qType) {
		if (qBnak != null) {
			String path = request.getSession().getServletContext().getRealPath("upload");
			String fileName = file.getOriginalFilename();
			qBnak.setQbImageUrl(path);
			qBnak.setQbModifyTime(new Date());
			qBnak.setQbDelete(false);
			qType=questionTypeService.getQuestionTypeName(qType.getQtName());
			qBnak.setQbQtid(qType.getQtId());
			questionBankService.updateQuestionBnak(qBnak);
		}
		return "forward:../question/selectAllQuestion";// 修改完成返回 查询的action
	}
	
	
	//根据id删除题库题目
	@RequestMapping("deleteQuestionBnak")
	public String delectQuestionBnak(QuestionBnak qBnak){
		questionBankService.deleteQuestionBnak(qBnak);
		return "redirect:../question/selectAllQuestion";
	}
	
	
	
	
	

	//1.3 答题信息入库操作
	@RequestMapping("questionDailyFormInfo")
	public String dailySuccess(HttpServletRequest request){
		long qdId=Long.parseLong(request.getParameter("qdId"));
		
		QuestionDaily questionDaily=new QuestionDaily();
		
		questionDaily=questionDailyService.getQuestionDailyById(qdId);
		String qdIds[]=questionDaily.getQdQbid().split(",");
		List<QuestionPaper> questionPaperList=new ArrayList<QuestionPaper>();
		
		for(int i=0;i<qdIds.length;i++){
			QuestionPaper questionPaper=new QuestionPaper();
			
		}
		/*questionPaperService.addQuestionPaper(questionPaper);*/
		return "questionInfoSuccess";
		
	}

	
	

	//初始化时间函数
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(
				dateFormat, false));
		       //true:允许输入空值，false:不能为空值    
	}
	

}
