package com.pctc.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.pctc.model.Student;
import com.pctc.model.StudentExample;
import com.pctc.model.Teacher;
import com.pctc.model.StudentExample.Criteria;
import com.pctc.service.TeacherStudentService;

@Controller
@RequestMapping("/teacher")
@SessionAttributes(value={"teacher"}, types={String.class})
public class TeacherStudentAction {

	@Autowired
	private TeacherStudentService studentService;
	

	// 跳转的添加页面
	@RequestMapping("/studentAddInput")
	public String addStudentPage() {
		return "studentAdd";
	}

	// 执行添加学生业务
	@RequestMapping(value = "/studentAddForm", method = RequestMethod.POST)
	public String addStudent(Student student) {
		student.setsCreateTime(new Date());
		student.setsDelete(false);
		studentService.addStudent(student);
		return "success";
	}

	// 条件分页查询所有数据
	@RequestMapping("/studentsPageIf")
	public String getStudentsPageIf(@RequestParam(value = "pagenum", defaultValue = "1") Integer pagenum,
			Map<String, Object> map, Student student) {
		// 放在查询之前 分页插件PageHelper
		Page<Object> page = PageHelper.startPage(pagenum, 5);// 第几页，每页多少条
		StudentExample studentExample = new StudentExample();
		Criteria criteria = studentExample.createCriteria();
		if (student.getsUsername() != null && !"".equals(student.getsUsername())) {
			criteria.andSUsernameLike("%" + student.getsUsername() + "%");
		}
		if (student.getsId() != null) {
			criteria.andSIdEqualTo(student.getsId());
		}
		if (student.getsInsid() != null) {
			criteria.andSInsidEqualTo(student.getsInsid());
		}
		if (student.getsCreateTime() != null) {
			criteria.andSCreateTimeEqualTo(student.getsCreateTime());
		}
		criteria.andSDeleteEqualTo(false);

		List<Student> students = studentService.getStudent(studentExample);

		// 分页插件信息PageInfo
		PageInfo<Student> info = new PageInfo<Student>(students, 5);
		map.put("students", students);
		map.put("infos", info);
		return "studentList1";
	}

	// 跳转修改页面
	@RequestMapping("/studentUpdate")
	public String studentUpdateInput(@RequestParam(value = "sId") Long sId, Map<String, Object> map) {
		Student student = studentService.getStudent(sId);
		map.put("student", student);

		return "studentUpdateInput";
	}

	// 修改数据
	@RequestMapping(value = "/updateStudent", method = RequestMethod.POST)
	public String updateStudent(Student student,Map<String, Object> map) {

		Teacher teacher=(Teacher)map.get("teacher");
		student.setsModifyTime(new Date());
		student.setsModifyBy(teacher.gettUsername());
		
		studentService.updateStudent(student);
		return "success";

	}

	// 删除数据
	@RequestMapping("/studentDelete")
	public String deleteStudent(Long sId) {
		studentService.deleteStudentFalse(sId);
		return "forward:/teacher/studentsPageIf";
	}

	// 根据姓名查询，姓名相同，就不能添加
	// 返回的数据是json数据
	@ResponseBody
	@RequestMapping("/studentName1")
	public boolean getStudentName1(Student student) {
		boolean exits = false;
		StudentExample studentExample = new StudentExample();
		Criteria criteria = studentExample.createCriteria();
		System.out.println(student.getsUsername());

		if (student.getsUsername() != null && !student.getsUsername().trim().equals("")) {
			criteria.andSUsernameEqualTo(student.getsUsername());
		}

		List<Student> students = studentService.getStudent(studentExample);
		System.out.println(students.size());
		if (students.size() > 0)
			exits = true;
		else
			exits = false;

		return exits;
	}

	// 表单是时间类型的处理方法
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(false);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));// true允许表单的值为空
	}
}
