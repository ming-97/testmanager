package com.pctc.action;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.pctc.model.QuestionBnak;
import com.pctc.model.QuestionBnakExample;
import com.pctc.model.QuestionCourse;
import com.pctc.model.QuestionCourseChapter;
import com.pctc.model.QuestionDaily;
import com.pctc.model.QuestionType;
import com.pctc.service.QuestionBankService;
import com.pctc.service.QuestionCourseChapterService;
import com.pctc.service.QuestionCourseService;
import com.pctc.service.QuestionDailyService;
import com.pctc.service.QuestionTypeService;

@Controller
@RequestMapping("returnPage")
public class Topage {

	@Autowired
	private QuestionTypeService questionTypeService;// 注入题型service

	@Autowired
	private QuestionBankService questionBankService;
	
	@Autowired 
	private QuestionDailyService questionDailyService;
	
	@Autowired
	private QuestionCourseService questionCourseService;
	
	@Autowired
	private QuestionCourseChapterService questionCourseChapterService;
	

	/**
	 * 跳转到添加题库可以页面
	 * 
	 * @return
	 */
	@RequestMapping("toaddQuestion")
	public String toAddQuestion(ModelMap map) {
		List<QuestionType> list = questionTypeService.selectAllQuestionType();
		map.put("qTypelist", list);
		return "addQuestion";// 将查询的题型信息返回到添加页面
	}

	// 跳转到每日一练管理页面
	@RequestMapping("toDaily")
	public String toDaliy() {
		return "dailyPractice";
	}

	//跳转到课程练习主管理界面
	@RequestMapping("toCourse")
	public String toCourse() {
		return "coursePractice";
	}
	
	
	//返回添加课程练习页面
	@RequestMapping("toAddQuestionCourse")
	public String toAddQuestionCourse(Map<String , Object> map){
		QuestionBnakExample qBnakExample=null;
		List<QuestionBnak> list=questionBankService.selectAllQuestion(qBnakExample);
		map.put("qBnaks", list);
		return "addQuestionCourse";
	}
	
	//跳转到更新课程练习页面
	@RequestMapping("toupdateQuestionCourse")
	public String toupdateQuestionCourse(Map<String , Object> map,QuestionCourse qCourse){
		qCourse=questionCourseService.selectQuestionCourseById(qCourse);//查询要修改的信息
		QuestionBnakExample qBnakExample=null;
		List<QuestionBnak> list=questionBankService.selectAllQuestion(qBnakExample);//查询所有信息
		map.put("qCourse", qCourse);
		map.put("qBnaks", list);
		return "updateQuestionCourse";
	}
	
	//跳转到章节练习主管理界面
	@RequestMapping("toChapter")
	public String toChapter() {
		return "chapterPractice";
	}
	
	

	// 添加每日一练题库
	@RequestMapping("toaddQuestionDaily")
	public String toAddQuestionDaily(Map<String , Object> map) {
		QuestionBnakExample qBnakExample=null;
		List<QuestionBnak> list=questionBankService.selectAllQuestion(qBnakExample);
		map.put("qBnaks", list);
		return "addQuestionDaily";
	}

	// 根据页面传入的参数去数据库查找数据，。将查找到的数据返回给修改页面
	@RequestMapping("toupdateQuestionBnak")
	public String toupdateQuestionBnak(QuestionBnak qBnak, Map<String, Object> map) {
		if (qBnak.getQbId() != null && !"".equals(qBnak.getQbId().toString().trim())) {
			qBnak = questionBankService.getQusetionBankById(qBnak.getQbId());
		}
		List<QuestionType> list = questionTypeService.selectAllQuestionType();
		map.put("qTypelist", list);
		map.put("questionBnak", qBnak);
		return "updateQuestionPage";// 返回修改页面
	}
	
	//条主导跟新每日一练界面
	@RequestMapping("toupdateQuestionDaily")
	public String toupdateQuestion(QuestionDaily qDaily,Map<String , Object> map){
		qDaily=questionDailyService.getQuestionDailyById(qDaily.getQdId());
		map.put("qdaily", qDaily);
		QuestionBnakExample qBnakExample=null;
		List<QuestionBnak> list=questionBankService.selectAllQuestion(qBnakExample);
		map.put("qBnaks", list);
		return "updateQuestionDaily";
	}
	
	
	//跳赚到更新章节练习页面
	@RequestMapping("toupdateQuestionCourseChapter")
	public String toupdateQuestionCourseChater(QuestionCourseChapter qCourseChapter,Map<String, Object> map){
		qCourseChapter=questionCourseChapterService.selectQuestionCourseChapter(qCourseChapter.getQccId());
		map.put("qCourseChapter", qCourseChapter);
		QuestionBnakExample qBnakExample=null;
		List<QuestionBnak> list=questionBankService.selectAllQuestion(qBnakExample);
		map.put("qBnaks", list);
		return "updateQuestionCourseChapter";
	}
	
	
	
	@RequestMapping("toAddQuestionCourseChapter")
	public String toAddQuestionCourseChapter(Map<String, Object> map){
		QuestionBnakExample qBnakExample=null;
		List<QuestionBnak> list=questionBankService.selectAllQuestion(qBnakExample);
		map.put("qBnaks", list);
		
		
		
		
		return "AddQuestionCourseChapter";
		
	}
	

}
